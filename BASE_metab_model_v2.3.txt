## JAGS model
      
	model{
    
    # -------
    # PRIORS

    # Set prior of K based on user choices:
    K.mu <- ifelse(K.est.n == 1, 0.0 , K.meas.mean.ts)
    K.sd <- ifelse(K.est.n == 1, 0.25, 1/(K.meas.sd.ts*K.meas.sd.ts) )
    K ~ dnorm(K.mu,K.sd)T(0,40/(seconds/interval)) 	# estimated

    # Set priors of theta and p parameters based on user choice:
    p.mu  <- ifelse(p.est.n == 1, 0.0, 1)
    p.low <- ifelse(p.est.n == 1, 0.3, 1)
    p ~ dnorm(p.mu,0.25)T(p.low,1.0)
    
    theta.mu   <- ifelse(theta.est.n == 1, 0.0, 1.07177)
    theta.low  <- ifelse(theta.est.n == 1, 1.0, 1.07177)
    theta.high <- ifelse(theta.est.n == 1, 1.3, 1.07177)
    theta ~ dnorm(theta.mu,0.25)T(theta.low,theta.high)
    
    # set other priors
    A ~ dnorm(0,0.25)T(0,)
    R ~ dnorm(0,0.25)T(0,)	
    
    tau~dgamma(1,0.001)
    
    #--------
    
    seconds <- 24 * 60 * 60
    
    # model
    temp.ave <- mean(tempC[])
    
    # for posterior predictive assessment and goodness of fit evaluation
    obs.resid[num.measurements] <- 0
    ppa.resid[num.measurements] <- 0
    
    # DO modelled
    zz ~ dnorm(0,1000000)
    DO.modelled[1] <- DO.meas[1] + zz # make monitorable
    
    for (i in 1:(num.measurements-1)){		
     
      DO.meas[i+1] ~ dnorm(DO.modelled[i+1], tau)
      DO.modelled[i+1] <- DO.modelled[i] 
        + A * pow(PAR[i],p)                                       			  
        - R * (pow(theta,(tempC[i]-temp.ave)))
        + K * (DO.sat[i]-DO.modelled[i]) * pow(1.0241,(tempC[i]-temp.ave))
      
      # posterior predictive assessment nodes #
      
      # plausible sampled value
      DO.sampled.fit[i] ~ dnorm(DO.modelled[i], tau) 
      
      # squared residuals		
      obs.resid[i] <- pow((DO.meas[i] - DO.modelled[i]),2)
      ppa.resid[i] <- pow((DO.sampled.fit[i] - DO.modelled[i]),2)
      
      kpts[i] <- K * pow(1.0241,(tempC[i]-temp.ave))	 
      gppts[i] <- A * pow(PAR[i],p) 
      erpts[i] <- R * (pow(theta,(tempC[i]-temp.ave)))
      
    }
    
    # for posterior predictive assessment and goodness of fit evaluation
    sum.obs.resid <- sum(obs.resid[])
    sum.ppa.resid <- sum(ppa.resid[])
    PPfit <- step(sum.obs.resid - sum.ppa.resid)
    
    # Useful calculations
    ER <- R * (seconds/interval)
    GPP <- sum(gppts[])
    NEP <- GPP - ER
    PR <- GPP / ER
    K.day <- K * (seconds/interval)
    
}
          